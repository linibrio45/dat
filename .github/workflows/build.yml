name: Axum SIMD JSON via Cloudflared

on:
  workflow_dispatch:

jobs:
  run-axum-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Create Axum project files
        run: |
          # Создаем Cargo.toml с SIMD-библиотекой и правильным feature flag
          cat << 'EOF' > Cargo.toml
          [package]
          name = "axum-server"
          version = "0.1.0"
          edition = "2021"

          [dependencies]
          axum = "0.8.4"
          tokio = { version = "1.46.0", features = ["full"] }
          serde_json = "1.0.140"
          
          # ИСПРАВЛЕНИЕ №1: Включаем feature "axum" для корректной интеграции
          sonic-rs = { version = "0.4.1", features = ["axum"] }
          EOF

          # Создаем папку src и файл main.rs
          mkdir src
          cat << 'EOF' > src/main.rs
          // ИСПРАВЛЕНИЕ №2: Импортируем 'Json' из специального модуля sonic_rs::axum
          use sonic_rs::axum::Json; 
          use sonic_rs::json; // макрос 'json!' импортируем из корня

          use axum::{
              routing::get,
              response::IntoResponse,
              Router
          };
          use std::net::SocketAddr;
          use std::sync::atomic::{AtomicU64, Ordering};
          use std::time::Duration;

          static RPS_COUNTER: AtomicU64 = AtomicU64::new(0);

          #[tokio::main]
          async fn main() {
              tokio::spawn(async move {
                  loop {
                      tokio::time::sleep(Duration::from_secs(1)).await;
                      let count = RPS_COUNTER.swap(0, Ordering::Relaxed);
                      println!("RPS: {}", count);
                  }
              });

              let app = Router::new().route("/", get(handler));

              let addr = SocketAddr::from(([0, 0, 0, 0], 8000));
              println!("Axum server with SIMD JSON listening on {}", addr);

              let listener = tokio::net::TcpListener::bind(addr).await.unwrap();
              axum::serve(listener, app).await.unwrap();
          }

          async fn handler() -> impl IntoResponse {
              RPS_COUNTER.fetch_add(1, Ordering::Relaxed);
              
              // Теперь эта конструкция полностью корректна
              Json(json!({ "message": "Hello, World!" }))
          }
          EOF

      - name: Build Axum project with native optimizations
        run: |
          RUSTFLAGS='-C target-cpu=native' cargo build --release
          
      - name: Install Cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Run Services and Get Public URL
        timeout-minutes: 10
        run: |
          ./target/release/axum-server &
          
          sleep 5
          touch cloudflared.log
          
          cloudflared tunnel --url http://localhost:8000 --no-autoupdate --logfile cloudflared.log --protocol http2 &
          
          echo "Waiting for Cloudflared URL... (up to 90 seconds)"
          
          for i in {1..45}; do
            URL=$(grep -o 'https://.*\.trycloudflare.com' cloudflared.log || true)
            if [ -n "$URL" ]; then
              echo "===================================================================="
              echo "✅ Your public URL is: $URL"
              echo "===================================================================="
              echo "Server is running. Workflow will not exit."
              tail -f /dev/null
            fi
            sleep 2
          done
          
          echo "::error::Failed to get Cloudflared URL within 90 seconds."
          cat cloudflared.log
          exit 1
