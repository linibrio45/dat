name: FastAPI via Cloudflared

on:
  workflow_dispatch:

jobs:
  run-fastapi-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install fastapi "uvicorn[standard]" uvloop httptools

      - name: Create FastAPI app file
        run: |
          cat << 'EOF' > main.py
          from fastapi import FastAPI

          app = FastAPI()

          @app.get("/")
          async def main():
              return {"message": "Hello, World!"}
          EOF

      - name: Install Cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Run Cloudflared and FastAPI server
        run: |
          # Запускаем Uvicorn в фоновом режиме
          uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4 --loop uvloop --http httptools &
          
          # Даем Uvicorn пару секунд на запуск
          sleep 5
          
          # ИСПРАВЛЕНИЕ: Создаем пустой лог-файл ЗАРАНЕЕ.
          # Это предотвратит падение команды grep, если cloudflared еще не успел создать файл.
          touch cloudflared.log
          
          # Запускаем Cloudflared и направляем его вывод в лог
          cloudflared tunnel --url http://localhost:8000 --no-autoupdate > cloudflared.log 2>&1 &

          # Ждем, пока Cloudflared сгенерирует URL.
          # Увеличили таймаут на всякий случай.
          echo "Waiting for Cloudflared URL..."
          for i in {1..15}; do
            if grep -q "trycloudflare.com" cloudflared.log; then
              break
            fi
            echo "Still waiting... (attempt $i/15)"
            sleep 2
          done
          
          # Извлекаем URL и выводим его в консоль
          PUBLIC_URL=$(grep -o 'https://.*\.trycloudflare.com' cloudflared.log)

          # Теперь этот блок обработки ошибок сработает корректно, если URL не будет найден
          if [ -z "$PUBLIC_URL" ]; then
            echo "::error::Could not retrieve Cloudflared URL after 30 seconds."
            echo "::error::Displaying cloudflared.log for debugging:"
            cat cloudflared.log
            exit 1
          fi

          echo "===================================================================="
          echo "✅ Your public URL is: $PUBLIC_URL"
          echo "===================================================================="
          
          # Бесконечный цикл, чтобы воркфлоу не завершился
          echo "Server is running. Workflow will not exit."
          tail -f /dev/null
