name: FastAPI via Cloudflared

on:
  workflow_dispatch:

jobs:
  run-fastapi-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install fastapi "uvicorn[standard]" uvloop httptools

      - name: Create FastAPI app file
        run: |
          cat << 'EOF' > main.py
          from fastapi import FastAPI

          app = FastAPI()

          @app.get("/")
          async def main():
              return {"message": "Hello, World!"}
          EOF

      - name: Install Cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Run Services and Get Public URL
        timeout-minutes: 10
        run: |
          # Запускаем Uvicorn в фоновом режиме
          uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4 --loop uvloop --http httptools &
          
          # Даем Uvicorn время на старт
          sleep 5
          
          # ГЛАВНОЕ ИСПРАВЛЕНИЕ №1: Создаем лог-файл заранее, чтобы избежать гонки с grep
          touch cloudflared.log
          
          # ГЛАВНОЕ ИСПРАВЛЕНИЕ №2: Запускаем Cloudflared, принудительно используя протокол http2.
          # Это обходит проблему с размером буфера UDP/QUIC в GitHub Actions.
          cloudflared tunnel --url http://localhost:8000 --no-autoupdate --logfile cloudflared.log --protocol http2 &
          
          echo "Waiting for Cloudflared URL... (up to 90 seconds)"
          
          # Цикл ожидания, который теперь будет работать стабильно
          for i in {1..45}; do
            # Ищем URL в логе. Теперь grep не упадет, так как файл существует
            URL=$(grep -o 'https://.*\.trycloudflare.com' cloudflared.log)
            if [ -n "$URL" ]; then
              echo "===================================================================="
              echo "✅ Your public URL is: $URL"
              echo "===================================================================="
              # Как только URL получен, "замораживаем" воркфлоу, чтобы серверы работали
              echo "Server is running. Workflow will not exit."
              tail -f /dev/null
              exit 0
            fi
            sleep 2
          done
          
          # Если мы вышли из цикла, значит URL не появился за 90 секунд
          echo "::error::Failed to get Cloudflared URL within 90 seconds."
          echo "Dumping cloudflared.log:"
          cat cloudflared.log
          exit 1
