name: FastAPI via Cloudflared

on:
  workflow_dispatch:

jobs:
  run-fastapi-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install fastapi "uvicorn[standard]" uvloop httptools

      - name: Create FastAPI app file with RPS counter
        run: |
          # Создаем файл main.py с логикой для подсчета RPS
          cat << 'EOF' > main.py
          import os
          import uuid
          from pathlib import Path
          from fastapi import FastAPI, Request

          # Папка для временных файлов-счетчиков
          RPS_COUNTER_DIR = Path("/tmp/rps_counters")
          RPS_COUNTER_DIR.mkdir(exist_ok=True)

          app = FastAPI()

          # Middleware, который выполняется для каждого запроса
          @app.middleware("http")
          async def count_requests_middleware(request: Request, call_next):
              # Создаем уникальный пустой файл для этого запроса.
              # Имя файла состоит из ID процесса и уникального ID запроса.
              # Это гарантирует, что даже один воркер, обработавший 1000 запросов
              # в секунду, создаст 1000 уникальных файлов.
              Path(RPS_COUNTER_DIR, f"{os.getpid()}-{uuid.uuid4()}").touch()
              
              response = await call_next(request)
              return response

          @app.get("/")
          async def main():
              return {"message": "Hello, World!"}
          EOF

      - name: Install Cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Run Services and Get Public URL
        timeout-minutes: 10
        run: |
          # 1. Запускаем Uvicorn в фоне с ОТКЛЮЧЕННЫМИ логами доступа
          uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4 --loop uvloop --http httptools --no-access-log &
          
          sleep 5
          touch cloudflared.log
          
          # 2. Запускаем Cloudflared
          cloudflared tunnel --url http://localhost:8000 --no-autoupdate --logfile cloudflared.log --protocol http2 &
          
          # 3. Запускаем в фоне наш скрипт для подсчета RPS
          (
            while true; do
              sleep 1
              # Считаем количество файлов в директории
              count=$(find /tmp/rps_counters -type f | wc -l)
              # Выводим RPS
              echo "RPS: $count"
              # Удаляем файлы, чтобы обнулить счетчик на следующую секунду
              find /tmp/rps_counters -type f -delete
            done
          ) &

          echo "Waiting for Cloudflared URL... (up to 90 seconds)"
          
          # Цикл ожидания URL
          for i in {1..45}; do
            URL=$(grep -o 'https://.*\.trycloudflare.com' cloudflared.log || true)

            if [ -n "$URL" ]; then
              echo "===================================================================="
              echo "✅ Your public URL is: $URL"
              echo "===================================================================="
              echo "Server is running. Workflow will not exit."
              # Зависаем здесь навечно
              tail -f /dev/null
            fi
            sleep 2
          done
          
          echo "::error::Failed to get Cloudflared URL within 90 seconds."
          cat cloudflared.log
          exit 1
